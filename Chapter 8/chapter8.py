# -*- coding: utf-8 -*-
"""Manim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YbEYa-U7jTKiDC-lTQbKB4Z1S0Umb7ak
"""

!sudo apt update
!sudo apt install libcairo2-dev ffmpeg \
    texlive texlive-latex-extra texlive-fonts-extra \
    texlive-latex-recommended texlive-science \
    tipa libpango1.0-dev
!pip install manim
!pip install IPython --upgrade

from manim import *

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SquareToCircle
# 
# class SquareToCircle(Scene):
#    def construct(self):
#       square = Square()
#       circle = Circle()
#       circle.set_fill(PINK, opacity=0.5)
#       self.play(Create(square))
#       self.play(Transform(square, circle))
#       self.wait()

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Intro
# 
# class Intro(Scene):
#     def construct(self):
#         intro = Tex("Chapter 8: Congruence of Triangles")
#         intro_1 = Tex("Class 8")        
#         intro_1.next_to(intro, 1.5*DOWN)
#         self.play(Write(intro))
#         self.play(FadeIn(intro_1))
#         self.wait(2)
#         self.play(FadeOut(intro), FadeOut(intro_1))
#         self.wait(1)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Congruency
# 
# class Congruency(Scene):
#     def construct(self):
#         title = Tex("Congruency")
#         title = title.move_to(3*UP)
#         text_1 = Tex("Now let us consider 2 Rectangles").scale(0.75)
#         text_2 = Tex("Now if we place them above one another, they perfectly line up!").scale(0.75)
#         text_3 = Tex("This happens because the shapes are congruent").scale(0.75)
#         text_4 = Tex("Any two objects with the same shape and size are congruent").scale(0.75)
#         rect_1 = Rectangle(color = "Red")
#         rect_2 = Rectangle(color = "Green")
#         rect_3 = Rectangle(color = "YELLOW")
#         rect_1 = rect_1.move_to(3*LEFT+(1/2)*DOWN)
#         rect_2 = rect_2.move_to(3*RIGHT+(1/2)*DOWN)
#         rect_3 = rect_3.move_to((1/2)*DOWN)
#         text_1.next_to(title, 2*DOWN)
#         text_2.next_to(text_1, DOWN)
#         text_3.next_to(rect_3, 5/2*DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(rect_1), FadeIn(rect_2))
#         # self.play(FadeIn(rect_2))
#         self.wait(2)
#         self.play(Write(text_2))
#         self.play(Transform(rect_1, rect_3), Transform(rect_2, rect_3))
#         self.play(Write(text_3))
#         self.wait(2)
#         self.play(Write(text_4))
#         # self.play(Transform(rect_2, rect_3))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Conlines
# 
# class Conlines(Scene):
#     def construct(self):
#         title = Tex("Congruency of lines")
#         title = title.move_to(3*UP)
#         text_1 = Tex("For lines, they have to be of equal length").scale(0.75)
#         text_2 = Tex("Overlapping them will show that these lines are congruent").scale(0.75)
#         text_1.next_to(title, 2*DOWN)
#         text_2.next_to(text_1, DOWN)
#         line_1 = Line(start=LEFT, end=RIGHT+DOWN)
#         line_2 = Line(start=RIGHT, end=LEFT+DOWN)
#         line_1 = line_1.move_to(2*LEFT)
#         line_2 = line_2.move_to(2*RIGHT)
#         line_3 = Line(start=DOWN, end=UP)
#         line_3.next_to(text_2, 2*DOWN)
#         symbol = ImageMobject("congruence.png").scale(0.25)
#         symbol.next_to(line_3, 4*DOWN+12*RIGHT)
#         text_3 = Tex("It is represented by this symbol --").scale(1)
#         text_3.next_to(symbol, LEFT)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(line_1), FadeIn(line_2))
#         self.wait(1)
#         self.play(Write(text_2))
#         self.wait(1)
#         self.play(Transform(line_1, line_3), Transform(line_2, line_3))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(FadeIn(symbol))
#         # self.play(Write(text_3))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING Contriangles
# 
# class Contriangles(Scene):
#     def construct(self):
#         title = Tex("Congruency of Triangles")
#         title = title.move_to(3*UP)
#         text_1 = Tex("Triangles are congruent if they completely overlap each other").scale(0.75)
#         text_2 = Tex("Notice that the sides and the angles are equal for both triangles").scale(0.75)
#         text_1.next_to(title, 2*DOWN)
#         triangles = ImageMobject("contriangles.png").scale(0.5)
#         text_2.next_to(triangles, DOWN)
#         text_3 = Tex("To check this, you do not need to know all 6 of them.").scale(0.75)
#         text_4 = Tex("Just three of the measurements are enough to say that the triangles are congruent").scale(0.75)
#         text_3.next_to(text_2, DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(triangles))
#         self.play(Write(text_2))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(Write(text_4))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SSS
# 
# class SSS(Scene):
#     def construct(self):
#         title = Tex("Measures of Congruence")
#         title = title.move_to(3*UP)
#         title_1 = Tex("SSS Method")
#         title_1.next_to(title, DOWN)
#         title_2 = Tex("Side Side Side")
#         title_2.next_to(title, DOWN)
#         text_1 = Tex("If all three sides of both triangles are known, and each side of the first triangle has one distinct side on the second triangle it is equal to, then they are congruent").scale(0.65)
#         text_1.next_to(title_2, 2*DOWN)
#         triangles = ImageMobject("SSS.png").scale(1.5)
#         triangles.next_to(text_1, DOWN)
#         text_3 = Tex("Notice that each side in ABC has a corresponding equal side in PQR").scale(0.75)
#         text_4 = Tex("Hence they are congruent").scale(0.75)
#         text_3.next_to(triangles, DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(title_1))
#         self.wait(1)
#         self.play(ReplacementTransform(title_1, title_2))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(triangles))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(Write(text_4))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING SAS
# 
# class SAS(Scene):
#     def construct(self):
#         title = Tex("Measures of Congruence")
#         title = title.move_to(3*UP)
#         title_1 = Tex("SAS Method")
#         title_1.next_to(title, DOWN)
#         title_2 = Tex("Side Angle Side")
#         title_2.next_to(title, DOWN)
#         text_1 = Tex("If two sides and the angle between the sides are same, the two triangles are congruent").scale(0.75)
#         text_1.next_to(title_2, 2*DOWN)
#         triangles = ImageMobject("SAS.png").scale(1.25)
#         triangles.next_to(text_1, DOWN)
#         text_3 = Tex("Notice that AB = PQ; AC = PR; and angle(A) = angle(P) in the triangles").scale(0.75)
#         text_4 = Tex("Hence they are congruent").scale(0.75)
#         text_3.next_to(triangles, DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(title_1))
#         self.wait(1)
#         self.play(ReplacementTransform(title_1, title_2))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(triangles))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(Write(text_4))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING ASA
# 
# class ASA(Scene):
#     def construct(self):
#         title = Tex("Measures of Congruence")
#         title = title.move_to(3*UP)
#         title_1 = Tex("ASA Method")
#         title_1.next_to(title, DOWN)
#         title_2 = Tex("Angle Side Angle")
#         title_2.next_to(title, DOWN)
#         text_1 = Tex("If two angles are equal and the side between the angles are equal, the triangles are congruent").scale(0.75)
#         text_1.next_to(title_2, 2*DOWN)
#         triangles = ImageMobject("ASA.png").scale(1.25)
#         triangles.next_to(text_1, DOWN)
#         text_3 = Tex("Notice that AB = PQ; angle(B) = angle(Q); and angle(A) = angle(P)").scale(0.75)
#         text_4 = Tex("Hence they are congruent").scale(0.75)
#         text_3.next_to(triangles, DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(title_1))
#         self.wait(1)
#         self.play(ReplacementTransform(title_1, title_2))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(triangles))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(Write(text_4))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING RHS
# 
# class RHS(Scene):
#     def construct(self):
#         title = Tex("Measures of Congruence")
#         title = title.move_to(3*UP)
#         title_1 = Tex("RHS Method")
#         title_1.next_to(title, DOWN)
#         title_2 = Tex("Right angled Hypotenuse Side")
#         title_2.next_to(title, DOWN)
#         text_1 = Tex("If the triangles are right angled, and their hypotenuses (longest sides) are equal, and a “leg” off each side is equal, then they are congruent").scale(0.65)
#         text_1.next_to(title_2, 2*DOWN)
#         triangles = ImageMobject("RHS.png").scale(1.20)
#         triangles.next_to(text_1, DOWN)
#         text_3 = Tex("Notice that PQR = MLN = 90 degrees and PR = MN = 13cm (longest side)").scale(0.75)
#         text_4 = Tex("Hence they are congruent").scale(0.75)
#         text_5 = Tex("Remember: RHS is a method used on Right Angled Triangles ONLY").scale(0.75)
#         text_5.next_to(triangles, 1.5*DOWN)
#         text_3.next_to(triangles, DOWN)
#         text_4.next_to(text_3, DOWN)
#         self.play(Write(title))
#         self.wait(1)
#         self.play(Write(title_1))
#         self.wait(1)
#         self.play(ReplacementTransform(title_1, title_2))
#         self.wait(1)
#         self.play(Write(text_1))
#         self.play(FadeIn(triangles))
#         self.wait(2)
#         self.play(Write(text_3))
#         self.play(Write(text_4))
#         self.wait(2)
#         self.play(Transform(text_3, text_5), Transform(text_4, text_5))
#         self.wait(2)

# Commented out IPython magic to ensure Python compatibility.
# %%manim -qm -v WARNING thanks
# 
# class thanks(Scene):
#      def construct(self):
#                 thanks=Tex("Thank you!").scale(2)
#                 self.play(Write(thanks))
#                 self.wait(2)
#                 self.play(FadeOut(thanks))
#                 logo=ImageMobject('ihelp.png').scale(1)
#                 self.play(FadeIn(logo), run_time=1)
#                 self.wait(4)